{"version":3,"sources":["components/Navigation/Navigation.js","components/Input/Input.js","components/Label/Label.js","App.js","components/SignIn/SignIn.js","components/Register/Register.js","serviceWorker.js","index.js"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Input","mic","record","type","id","hidden","src","Label","rows","cols","App","React","Component","analyzeResponse","results","textarea","document","getElementById","length","transcript","forEach","result","push","alternatives","innerText","toString","console","log","renderRecording","blob","blobUrl","URL","createObjectURL","state","mimeType","audio","anchor","setAttribute","now","Date","getFullYear","getMonth","padStart","getDay","getHours","getMinutes","getSeconds","formData","FormData","append","fetch","method","body","then","response","json","catch","err","background","color","recorder","start","stop","ondataavailable","e","setState","chunks","data","onstop","recording","Blob","getMic","removeAttribute","navigator","mediaDevices","getUserMedia","stream","MediaRecorder","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1ab97239.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Navigation({onRouteChange, isSignedIn}) {\r\n \r\n  \tif (isSignedIn) {\r\n  \t\treturn (\r\n  \t  <nav style={{display:'flex', justifyContent:'flex-end'}}>\r\n       <p  onClick={()=>onRouteChange('signout')} className=\"f4 link dim white underline pa3 pointer \"> Sign Out </p>\r\n      </nav>\t\r\n    );\r\n  \t} else {\r\n  \t\treturn (\r\n  \t\t <nav style={{display:'flex', justifyContent:'flex-end'}}>\r\n          <p  onClick={()=>onRouteChange('signin')} className=\"f4 link dim white underline pa3 pointer \"> Sign In </p>\r\n          <p  onClick={()=>onRouteChange('register')} className=\"f4 link dim white underline pa3 pointer \"> Register</p>\r\n         </nav>\r\n        );\r\n  \t}\r\n}  \r\nexport default Navigation;","import React from 'react';\r\nimport './Input.css'\r\n\r\nfunction Input( { mic,record}) {\r\n  return (\r\n\r\n    <div  >\r\n       <p className='f3 white'>\r\n         Press the button to start recording\r\n       </p> \r\n       <div className='center pa2'>\r\n          <button type=\"button\" id=\"mic\" onClick={mic} >Get Microphone</button>\r\n          <button type=\"button\" id=\"record\" onClick={record}  hidden>Record</button>\r\n          <li id='clips'><audio id='audio_clip'></audio><a src='' id='audio_tag'> </a></li>\r\n\r\n\r\n       </div>\r\n       \r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default Input;\r\n\r\n\r\n/*          <button id='record' className=\"center grow link f4 pa2 white bg-black pointer shadow-5\" >Record</button>\r\n          <button id='stop' className=\"center grow link f4 pa2 white bg-black pointer shadow-5\" >Stop</button>*/","import React from 'react';\r\n\r\n\r\nfunction Label() {\r\n  return (\r\n  \t<div className='center ma' >\r\n    \t<textarea id='textoutput' rows=\"4\" cols=\"100\">\r\n  \r\n        </textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Label;\r\n\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Input from './components/Input/Input';\nimport Label from './components/Label/Label';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport ReactDOM from 'react-dom';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state= {\n      recorder:'',\n      chunks:[],\n      mimeType:'audio/webm;codecs=vp9',\n      }\n  };\n\n  analyzeResponse = (results) => {\n    const textarea = document.getElementById('textoutput');\n    if (results.length !== 0) {\n      let transcript = []\n      results.forEach(result => transcript.push(result.alternatives[0].transcript))\n      textarea.innerText = transcript.toString();\n      console.log(transcript)\n    } \n  };\n\n  renderRecording =(blob) => {\n    const blobUrl = URL.createObjectURL(blob,this.state.mimeType);\n    const audio = document.getElementById('audio_clip');\n    const anchor = document.getElementById('audio_tag');\n    anchor.setAttribute('href', blobUrl);\n    const now = new Date();\n    anchor.setAttribute(\n      'download',\n      `recording-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDay().toString().padStart(2, '0')}--${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}-${now.getSeconds().toString().padStart(2, '0')}.webm`\n    );\n    anchor.innerText = 'Download';\n    audio.setAttribute('src', blobUrl);\n    audio.setAttribute('controls', 'controls');\n    const formData = new FormData()\n    formData.append('myFile',blob)\n    fetch('https://speech-recog-api.herokuapp.com/audio', {method: 'POST',body: formData})\n    .then(response => response.json())\n    .then(response => this.analyzeResponse(response.result.results))\n    .catch(err =>console.log(err))\n\n  };\n\n\n\n  record = () => {\n    const record=document.getElementById('record')\n    if (record.innerText === 'Record') {\n        record.style.background = \"red\";\n        record.style.color = \"black\";\n        record.innerText = 'Stop';\n        this.state.recorder.start();\n        console.log(\"recorder started\");\n       } else {\n        record.style.background = \"black\";\n        record.style.color = \"red\";\n        record.innerText = 'Record';\n        this.state.recorder.stop()\n        console.log('recorder stopped')\n      }\n      this.state.recorder.ondataavailable = e =>  this.setState({chunks:[...this.state.chunks,e.data]});\n      this.state.recorder.onstop =  () => {\n        const recording = new Blob(this.state.chunks, {\n             type: this.state.mimeType\n           });\n        this.renderRecording(recording);\n           this.setState({chunks:[]});\n         };\n  }\n  \n  mic = () => {\n    const getMic = document.getElementById('mic');\n    const record=document.getElementById('record')\n    getMic.setAttribute('hidden','hidden');\n    record.removeAttribute('hidden');\n    const constraints = {audio:true};\n    navigator.mediaDevices.getUserMedia(constraints)\n    .then(stream=> {\n      this.setState({recorder:new MediaRecorder(stream)})\n    })\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <Navigation />\n      <div >\n        <Input mic={this.mic} record={this.record}/>\n        <Label />\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n        ","import React from 'react';\r\n//import './ImageLinkForm.css'\r\n\r\nclass SignIn extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      signInEmail:'',\r\n      signInPassword:''\r\n    }\r\n  }\r\n  onEmailChange = (event) => {\r\n    this.setState({signInEmail:event.target.value})\r\n  };\r\n  onPasswordChange = (event) => {\r\n    this.setState({signInPassword:event.target.value})\r\n  };\r\n  onSubmitSignIn = (event) => {\r\n    fetch('https://secret-tundra-90598.herokuapp.com/signin',{\r\n      method:'post',\r\n      headers:{'Content-Type':'application/json'},\r\n      body:JSON.stringify({\r\n        email:this.state.signInEmail,\r\n        password:this.state.signInPassword\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(user => {\r\n      if (user.id) {\r\n        this.props.loadUser(user);\r\n        this.props.onRouteChange('home');\r\n      }\r\n        })\r\n    .catch(err =>console.log(err))\r\n    \r\n    \r\n  };\r\n  render() {\r\n    const {onRouteChange} = this.props;\r\n    return (\r\n    <article className=\"br2 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center shadow-5\">\r\n      <main className=\"pa4 black-80\">\r\n        <div className=\"measure\">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f2 fw6 ph0 mh0\">Sign In</legend>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n              <input \r\n              className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n              type=\"email\" \r\n              name=\"email-address\"  \r\n              id=\"email-address\"\r\n              onChange={this.onEmailChange}\r\n               />\r\n            </div>\r\n            <div className=\"mv3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n              <input \r\n              className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n              type=\"password\" \r\n              name=\"password\"  \r\n              id=\"password\" \r\n              onChange={this.onPasswordChange}\r\n              />\r\n            </div>\r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input onClick={this.onSubmitSignIn} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"  type=\"submit\" value=\"Sign in\" />\r\n          </div>\r\n          <div className=\"lh-copy mt3 db\">\r\n            <p onClick={()=>onRouteChange('register')} className=\"pointer f6 link dim black db\">Register</p>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </article>\r\n  ); \r\n  }\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\n//import './ImageLinkForm.css'\r\n\r\nclass  Register extends React.Component  {\r\n\tconstructor (props) {\r\n\t    super(props)\r\n\t    this.state = {\r\n\t      email:'',\r\n\t      password:'',\r\n\t      name:''\r\n        }\r\n    }\r\n  onEmailChange = (event) => {\r\n    this.setState({email:event.target.value})\r\n  };\r\n  onPasswordChange = (event) => {\r\n    this.setState({password:event.target.value})\r\n  };\r\n  onNameChange = (event) => {\r\n    this.setState({name:event.target.value})\r\n  };\r\n  onSubmitRegister = (event) => {\r\n    fetch('https://secret-tundra-90598.herokuapp.com/register',{\r\n      method:'post',\r\n      headers:{'Content-Type':'application/json'},\r\n      body:JSON.stringify({\r\n        email:this.state.email,\r\n        password:this.state.password,\r\n        name:this.state.name\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(user => {\r\n      if (user.id) {\r\n      \tthis.props.loadUser(user)\r\n        this.props.onRouteChange('home')\r\n      }\r\n        })\r\n    .catch(err =>console.log(err))\r\n  };\r\n\trender() {\r\n\t\treturn (\r\n\t\t    <article className=\"br2 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center shadow-5\">\r\n\t\t      <main className=\"pa4 black-80\">\r\n\t\t        <div className=\"measure\">\r\n\t\t          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n\t\t            <legend className=\"f2 fw6 ph0 mh0\">Register</legend>\r\n\t\t            <div className=\"mt3\">\r\n\t\t              <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n\t\t              <input onChange={this.onNameChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"name\" name=\"name\"  id=\"name\" />\r\n\t\t            </div>\r\n\t\t            \r\n\t\t            <div className=\"mt3\">\r\n\t\t              <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n\t\t              <input onChange={this.onEmailChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />-\r\n\t\t            </div>\r\n\t\t            <div className=\"mv3\">\r\n\t\t              <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n\t\t              <input onChange={this.onPasswordChange} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\r\n\t\t            </div>\r\n\t\t          </fieldset>\r\n\t\t          <div className=\"\">\r\n\t\t            <input onClick={this.onSubmitRegister} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"  type=\"submit\" value=\"Register\" />\r\n\t\t          </div>\r\n\t\t         </div>\r\n\t\t      </main>\r\n\t\t    </article>\r\n        );\r\n\t}\r\n  \r\n}\r\n\r\nexport default Register;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}